import { dispatcher } from 'flux/Dispatcher';
import { Action } from 'types/Dispatcher.types';
import { NotificationActionTypes, UserPageTypes } from 'flux/ActionTypes';
import { NotificationItem } from 'types/Notification.types';
import { notificationReceived, websocketConnect, websocketDisconnect, websocketError } from 'flux/Actions';
import { PopupActions } from 'flux/Actions';

const MOCK_NOTIFICATIONS = [
  { title: '–ü—Ä–µ–º—å–µ—Ä–∞ —Ñ–∏–ª—å–º–∞', text: '–î—ç–¥–ø—É–ª –∏ –†–æ—Å–æ–º–∞—Ö–∞ - —É–∂–µ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö!' },
  { title: '–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω', text: '–•–æ–¥—è—á–∏–µ –º–µ—Ä—Ç–≤–µ—Ü—ã - 3 —Å–µ—Ä–∏—è —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞' },
  { title: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', text: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫: –ß–µ—Ä–µ–∑ –≤—Å–µ–ª–µ–Ω–Ω—ã–µ"' },
  { title: '–°–∫–æ—Ä–æ –≤ –∫–∏–Ω–æ', text: '–ê–≤–∞—Ç–∞—Ä 3 - –ø—Ä–µ–º—å–µ—Ä–∞ 20 –¥–µ–∫–∞–±—Ä—è 2024' },
  { title: '–¢–æ–ø –Ω–µ–¥–µ–ª–∏', text: 'Oppenheimer —Å—Ç–∞–ª —Å–∞–º—ã–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ñ–∏–ª—å–º–æ–º' },
  { title: '–ù–æ–≤–∏–Ω–∫–∞', text: '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º "–î—é–Ω–∞: –ß–∞—Å—Ç—å –≤—Ç–æ—Ä–∞—è"' },
  { title: '–ê–∫—Ü–∏—è', text: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É' },
  { title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', text: '–í–∞—à –ª—é–±–∏–º—ã–π –∞–∫—Ç–µ—Ä —Å–Ω—è–ª—Å—è –≤ –Ω–æ–≤–æ–º —Ñ–∏–ª—å–º–µ' }
];

type NotificationState = {
  notifications: NotificationItem[];
  isConnected: boolean;
  error: string | null;
};

type Listener = (state: NotificationState) => void;

class NotificationStore {
  private state: NotificationState;
  private listeners: Array<Listener>;

  private mockInterval: number | null = null;
  private mockIndex = 0;

  constructor() {
    this.state = {
      notifications: [],
      isConnected: false,
      error: null
    };
    this.listeners = [];

    dispatcher.register(this.handleActions.bind(this));
  }

  private startMockNotifications(): void {
    if (this.mockInterval) return;

    console.log('üîî Starting mock notifications...');

    this.mockInterval = window.setInterval(() => {
      const mockData = MOCK_NOTIFICATIONS[this.mockIndex % MOCK_NOTIFICATIONS.length];
      const notification: NotificationItem = {
        id: `mock_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
        title: mockData.title,
        text: mockData.text
      };

      console.log('üì¢ Mock notification:', notification);
      notificationReceived(notification);
      this.mockIndex++;
    }, 60000);

    setTimeout(() => {
      const firstNotification: NotificationItem = {
        id: `first_${Date.now()}`,
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        text: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
      };
      notificationReceived(firstNotification);
    }, 3000);
  }

  private stopMockNotifications(): void {
    if (this.mockInterval) {
      clearInterval(this.mockInterval);
      this.mockInterval = null;
      console.log('‚ùå Mock notifications stopped');
    }
  }

  private async handleActions(action: Action): Promise<void> {
    switch (action.type) {
      case NotificationActionTypes.WEBSOCKET_CONNECT:
        this.state.isConnected = true;
        this.state.error = null;
        this.emitChange();
        break;

      case NotificationActionTypes.WEBSOCKET_DISCONNECT:
        this.state.isConnected = false;
        this.emitChange();
        break;

      case NotificationActionTypes.WEBSOCKET_ERROR:
        this.state.error = action.payload as string;
        this.state.isConnected = false;
        this.emitChange();
        break;

      case NotificationActionTypes.NOTIFICATION_RECEIVED:
      case NotificationActionTypes.NOTIFICATION_ADD:
        const newNotification = action.payload as NotificationItem;
        this.state.notifications.unshift(newNotification);

        PopupActions.showPopup({
          title: newNotification.title,
          movieName: newNotification.text,
          releaseDate: '12 –∏—é–Ω—è 2025 –≥–æ–¥–∞',
          duration: 2500,
          isNotification: true
        });

        this.emitChange();
        break;

      case NotificationActionTypes.NOTIFICATION_REMOVE:
        const notificationId = action.payload as string;
        this.state.notifications = this.state.notifications.filter((n) => n.id !== notificationId);
        this.emitChange();
        break;

      case NotificationActionTypes.NOTIFICATIONS_CLEAR:
        this.state.notifications = [];
        this.emitChange();
        break;

      case UserPageTypes.LOGOUT_USER:
        this.disconnect();
        this.state.notifications = [];
        this.state.isConnected = false;
        this.state.error = null;
        this.emitChange();
        break;

      default:
        break;
    }
  }

  connect(): void {
    console.log('üîå Connecting to notifications...');
    this.startMockNotifications();
    websocketConnect();
  }

  disconnect(): void {
    console.log('üîå Disconnecting from notifications...');
    this.stopMockNotifications();
    websocketDisconnect();
  }

  subscribe(listener: Listener): void {
    this.listeners.push(listener);
  }

  unsubscribe(listener: Listener): void {
    const index = this.listeners.indexOf(listener);
    if (index > -1) {
      this.listeners.splice(index, 1);
    }
  }

  private emitChange(): void {
    this.listeners.forEach((listener) => listener(this.state));
  }

  getState(): NotificationState {
    return { ...this.state };
  }
}

export default new NotificationStore();
